{"version":3,"sources":["assets/code-logic.png","assets/forgetfulness.png","assets/later.png","assets/jequiti.jpg","assets/naruto.jpeg","assets/uncle-bob-defender-of-clean-code.jpg","slides/Home.tsx","slides/Phrases.tsx","components/Anchor.tsx","slides/GeneralRules.tsx","slides/codeLogic.ts","slides/forgetfulness.ts","slides/later.ts","slides/settings.ts","slides/polymorphism.tsx","slides/namesAreImportant.tsx","slides/negation.ts","slides/jequiti.ts","slides/abbreviation.tsx","slides/objectAsArguments.ts","slides/SpecialistFunction.tsx","slides/Architecture.tsx","slides/smallFunctions.tsx","slides/redundant.ts","slides/regex.ts","slides/restSpred.ts","slides/defaultValues.ts","slides/arrayDestructuring.ts","slides/keepItSimple.tsx","slides/modularize.tsx","slides/naruto.ts","slides/Justifications.tsx","slides/Justifications2.tsx","slides/SignsOfACleanCode.tsx","slides/MindsetCleanCode.tsx","slides/uncleBob.ts","slides/Slides.tsx","theme.ts","App.tsx","utils/renderImageSlide.tsx","utils/renderCodeSlide.tsx","utils/renderCommonSlide.tsx","index.tsx"],"names":["module","exports","Home","fontSize","phrases","Phrases","map","phrase","index","Fragment","key","Anchor","url","text","href","target","GeneralRules","slide","type","backgroundColor","backgroundImage","require","headerProps","children","code","stepperProps","defaultValue","values","description","SpecialistFunction","Architecture","backgroundOpacity","Justifications","Justifications2","SignsOfACleanCode","MindsetCleanCode","codeLogic","forgetfulness","later","settings","polymorphism","namesAreImportant","negation","jequiti","abbreviation","objectAsArguments","smallFunctions","redundant","regex","restSpred","defaultValues","arrayDestructuring","keepItSimple","modularize","naruto","uncleBob","colors","primary","secondary","App","transitionEffect","theme","slides","props","undefined","value","width","height","highlightStart","highlightEnd","language","autoFillHeight","darkTheme","sizes","minWidth","indentNormalizer","renderCodeSlide","backgroundSize","flexDirection","renderCommonSlide","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c88910a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/code-logic.96bf21ca.png\";","module.exports = __webpack_public_path__ + \"static/media/forgetfulness.e8d48a68.png\";","module.exports = __webpack_public_path__ + \"static/media/later.640ef0b2.png\";","module.exports = __webpack_public_path__ + \"static/media/jequiti.66cd68e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/naruto.56b3206b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/uncle-bob-defender-of-clean-code.485bf967.jpg\";","import React from 'react';\nimport { Heading } from 'spectacle';\n\nconst Home = () => (\n  <>\n    <Heading fontSize=\"150px\">Clean Code</Heading>\n    <Heading fontSize=\"h2\">Técnicas e boas práticas para um código limpo</Heading>\n  </>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Quote } from 'spectacle';\n\nconst phrases = [\n  `O código limpo sempre parece que foi escrito por alguém que se importa. - Michael Feathers`,\n  'Você sabe que está trabalhando em um código limpo quando cada rotina que você lê é praticamente o que você esperava. Você pode chamá-lo de código bonito quando o código também faz parecer que o idioma foi criado para o problema. - Ward Cunningham',\n  'Escrever um código é como escrever um livro. Deve-se escrever sempre pensando na compreensão dos leitores.'\n];\n\nconst Phrases = () => (\n  <>\n    {phrases.map((phrase: string, index: number) => (\n      <React.Fragment key={index}>\n        <Quote>{phrase}</Quote>\n      </React.Fragment>\n    ))}\n  </>\n);\n\nexport default Phrases;\n","import React from 'react';\n\nexport const Anchor = ({ url, text }: { url: string, text: string }) => (\n  <a href={url} target=\"_blanck\">{text}</a>\n);\n","import React from 'react';\nimport { Heading, UnorderedList, ListItem, CodeSpan } from 'spectacle';\nimport { Anchor } from '../components/Anchor';\n\nconst GeneralRules = () => (\n  <>\n    <Heading fontSize=\"h2\">Regras gerais</Heading>\n    <UnorderedList>\n      <ListItem>\n        <CodeSpan>Siga as convenções padrões</CodeSpan>\n        <UnorderedList>\n          <ListItem>\n            <CodeSpan>\n              <Anchor url=\"https://github.com/airbnb/javascript\" text=\"Airbnb,\" />\n              <Anchor url=\"https://github.com/google/styleguide\" text=\"Google...\" />\n            </CodeSpan>\n          </ListItem>\n          <ListItem>\n            <CodeSpan>ESLint, Prettier</CodeSpan>\n          </ListItem>\n        </UnorderedList>\n      </ListItem>\n\n      <ListItem>\n        <CodeSpan>Regra dos escoteiros</CodeSpan>\n        <UnorderedList>\n          <ListItem>\n            <CodeSpan>Deixe o acampamento mais limpo do que o encontrado.</CodeSpan>\n          </ListItem>\n        </UnorderedList>\n      </ListItem>\n    </UnorderedList>\n  </>\n);\n\nexport default GeneralRules;\n","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/code-logic.png')\n}\n\nexport default slide;","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/forgetfulness.png')\n}\n\nexport default slide;","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/later.png')\n}\n\nexport default slide;","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nclass UnicornService {\n  private BASE_URI = 'https://unicorn.com/api/';\n  private PRIVATE_KEY = 'tinker-bell';\n}`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Mantenha os dados configuráveis em níveis altos',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [],\n    values: [[2, 3]]\n  }\n}\n\nexport default slide;\n","import React from 'react';\nimport { Text } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst onKeyPress = (event: KeyboardEvent) => {\n  if (event.key === 'Enter') {\n    //...\n  } else if (event.key === 'Backspace') {\n    //...\n  }\n  //...\n};\n\\n\\n\nconst onKeyPress = (event: KeyboardEvent) => {\n  switch (event.key) {\n    case 'Enter':\n      //...\n      break;\n\n    case 'Backspace':\n      //...\n      break;\n\n    //...\n\n    default:\n      //...\n      break;\n  }\n};\n\\n\\n\\n\nconst handleKeys = {\n  Enter: (event: KeyboardEvent) => {/*...*/},\n  Backspace: (event: KeyboardEvent) => {/*...*/},\n  //... More methods\n};\n\nconst onKeyPress = (event: KeyboardEvent) => {\n  // https://github.com/tc39/proposal-optional-chaining\n  handleKeys[key]?.();\n};\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Prefira o polimorfismo a if/else ou switch/case.',\n    fontSize: 'h2'\n  },\n  description: <Text>Strategy Design Pattern</Text>,\n  code,\n  stepperProps: {\n    defaultValue: [1, 8],\n    values: [[12, 28], [33, 42]]\n  }\n}\n\nexport default slide;\n","import React from 'react';\nimport { Text } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nsetTimeout(() => console.log('DORIME'), 120000);\n\\n\\n\\n\\n\\n\\n\nconst elapsedTimeInMinutes = 12 * 10 * 1000;\nsetTimeout(() => console.log('DORIME'), elapsedTimeInMinutes);\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Nomes são importantes',\n    fontSize: 'h2'\n  },\n  description: (\n    <Text>\n      O nome de uma variável, função ou classe deve responder a todas as grandes questões. Deve dizer por que existe, o que faz e como é usado. Se um nome exigir um comentário, ele não revela sua intenção.\n    </Text>\n  ),\n  code,\n  stepperProps: {\n    defaultValue: [1, 1],\n    values: [[9, 10]]\n  }\n}\n\nexport default slide;\n","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst buttonDisabled = true;\nif (!buttonDisabled) {\n  //...\n}\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Não negue uma negação',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [],\n    values: []\n  }\n}\n\nexport default slide;\n","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/jequiti.jpg')\n}\n\nexport default slide;","import React from 'react';\nimport { Text } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\ngetRepositories()\n  .then(r => /*...*/)\n  .catch(e => /*...*/);\n\\n\\n\\n\\n\\n\\n\ngetRepositories()\n  .then(response => /*...*/)\n  .catch(error => /*...*/);\n\\n\\n\\n\\n\\n\\n\nnew Promise((res, rej) => {});\n\\n\\n\\n\\n\\n\\n\\n\\n\nnew Promise((resolve, reject) => {});\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Não abrevie nomes de variáveis',\n    fontSize: 'h2'\n  },\n  description: (\n    <Text>\n      As variáveis \"e\" e \"r\" além de estarem abreviada, não é passível de busca, pois uma letra sozinha, compõem diversos outros nomes…\n    </Text>\n  ),\n  code,\n  stepperProps: {\n    defaultValue: [1, 3],\n    values: [[11, 13], [21, 21], [31, 31]]\n  }\n}\n\nexport default slide;\n","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nexport const createModal = (title, body, onConfirm, onCancel) => {/**/};\n//...\ncreateModal(\n  'Baby Shark',\n  'doo doo doo doo doo doo doo doo',\n  () => {},\n  () => {}\n);\n\\n\\n\\n\\n\\n\\n\\n\nexport const createModal = ({ title, body, onConfirm, onCancel }) => {/**/};\n//...\ncreateModal({\n  title: 'Baby Shark',\n  body: 'doo doo doo doo doo doo doo doo',\n  onConfirm: () => {},\n  onCancel: () => {},\n});\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Ache o problema dessa função',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [1, 8],\n    values: [[17, 24]]\n  }\n}\n\nexport default slide;\n","import React from 'react';\nimport { Heading, Text } from 'spectacle';\n\nconst SpecialistFunction: React.FC = () => (\n  <>\n    <Heading fontSize=\"h2\">Funções objetivas e pequenas</Heading>\n    <Text>\n      Quando uma função é pequena, ela se torna especialista no que ela faz. E sendo especialista no que ela faz, ela fará o melhor trabalho possível.\n      </Text>\n\n    <Text>\n      Uma camada de regra do negócio que faz mais que uma \"coisa\" é, sim, um código sujo.\n    </Text>\n  </>\n);\n\nexport default SpecialistFunction;","import React from 'react';\nimport { Heading, Text } from 'spectacle';\n\nconst Architecture: React.FC = () => (\n  <>\n    <Heading fontSize=\"h2\">Funções objetivas e pequenas</Heading>\n    <Text>\n      Seguindo o conceito de responsabilidade única do SOLID, lembre-se que cada função deve seguir esse mesmo conceito. Clean Code e SOLID andam de mãos dadas. Um código \"Sólido\" tem tudo para ser um código limpo.\n    </Text>\n\n    <Text>\n      Independente da arquitetura de desenvolvimento que você use, não misture as coisas. O objeto na camada de acesso à dados (DAO) não faz validação do objeto, é responsabilidade da camada anterior tratar se os dados estão corretos antes de chamar o DAO. \"Single responsability\".\n    </Text>\n  </>\n);\n\nexport default Architecture;","import React from 'react';\nimport { Text } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst login = ({ user, password }) => {\n  if (/* Validação se o usuário é inválido */) {/*...*/}\n  if (/* Validação se a senha é inválida */) {/*...*/}\n  //...\n}\n\\n\\n\\n\nconst invalidUser = user => {/*...*/}\nconst invalidPassword = password => {/*...*/}\n\nconst login = ({ user, password }) => {\n  if (invalidUser(user)) {/*...*/}\n  if (invalidPassword(password)) {/*...*/}\n  //...\n}\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Funções objetivas e pequenas',\n    fontSize: 'h2'\n  },\n  description: (\n    <Text>\n      No cenário ideal, cada função tem 2, 3 ou 4 linhas e possui uma obviedade transparente. Cada uma conta uma história e leva você a próxima em uma ordem.\n    </Text>\n  ),\n  code,\n  stepperProps: {\n    defaultValue: [1, 5],\n    values: [[10, 17]]\n  }\n}\n\nexport default slide;\n","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst itIsOfAge = (age: number): Boolean => (age > 18 ? true : false);\n\nconst itIsOfAge = (age: number): Boolean => age > 18;\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Não seja redundante',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [],\n    values: [[1, 1], [3, 3]]\n  }\n}\n\nexport default slide;\n","/* eslint-disable no-useless-escape */\n\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nif (/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(password)) {\n  //...\n}\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\nconst passwordIsValid = (password: number): Boolean => {\n  // Minimum eight characters\n  // At least one uppercase letter\n  // One lowercase letter\n  // One number\n  // One special character\n  const validPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  return validPassword.test(password);\n};\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Escreva seus regex em uma constante',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [1, 3],\n    values: [[16, 24]]\n  }\n}\n\nexport default slide;\n","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst Component = (props) => {\n  const others = { ...props };\n  delete others.className;\n\n  return (\n    <div className={props.className}>\n      <OtherComponent {...others} />\n    </div>\n  );\n};\n\nconst Component = ({ className, ...others }) => (\n  <div className={className}>\n    <OtherComponent {...others} />\n  </div>\n);\n\n\n<Component a=\"1\" {...props} />\n\n<Component {...props} a={1} />\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'REST/Spread',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [1, 10],\n    values: [[12, 16], [19, 19], [21, 21]]\n  }\n}\n\nexport default slide;\n","/* eslint-disable no-template-curly-in-string */\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst classAndAdditionalClasses = '`icon-hover ${additionalClasses}`';\nconst classAndClassName = '`icon-hover ${className}`';\n\nconst code = `\nconst Icon = ({ className }) => {\n  const additionalClasses = className || 'icon-large'\n  return <i className={${classAndAdditionalClasses}} />\n};\n\nconst Icon = ({ className = 'icon-large' }) => (\n  <i className={${classAndClassName}} />\n);\n\nconst Icon = ({ className }) => (\n  <i className={${classAndClassName}} />\n);\n\nIcon.defaultProps = {\n  className: 'icon-large',\n};\n\nclass Icon extends React.Component {\n  static defaultProps = {\n    className: 'icon-large',\n  }\n\n  //...\n\n  render() {\n    return <i className={'icon-hover ' + this.props.className} />\n  }\n}\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Defina valores padrões',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [1, 4],\n    values: [[6, 8], [10, 16], [18, 28]]\n  }\n}\n\nexport default slide;\n","import { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst splitLocale = navigator.language.split('-')\nconst language = splitLocale[0]\nconst country = splitLocale[1]\n\nconst [language, country] = navigator.language.split('-')\n\nconst myArray = [1, 2]\nconst [a, d, c = 3] = myArray\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Array destructuring',\n    fontSize: 'h2'\n  },\n  code,\n  stepperProps: {\n    defaultValue: [1, 3],\n    values: [[5, 5], [7, 8]]\n  }\n}\n\nexport default slide;\n","import React from 'react';\nimport { UnorderedList, ListItem, CodeSpan } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst currentDate = new Date();\n\nconst handleSave = (event: MouseEvent) => {/*...*/};\n\nconst onSaveClick = (event: MouseEvent) => {/*...*/};\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: 'Mantenha simples e declarativo, mesmo que seja estúpido',\n    fontSize: 'h2'\n  },\n  description: (\n    <UnorderedList>\n      <ListItem>\n        <CodeSpan>Mais simples é sempre melhor</CodeSpan>\n      </ListItem>\n\n      <ListItem>\n        <CodeSpan>Reduza a complexidade o máximo possível.</CodeSpan>\n      </ListItem>\n    </UnorderedList>\n  ),\n  code,\n  stepperProps: {\n    defaultValue: [1, 1],\n    values: [[3, 5]]\n  }\n}\n\nexport default slide;\n","import React from 'react';\nimport { Text } from 'spectacle';\nimport { CodeSlide } from '../utils/renderCodeSlide';\n\nconst code = `\nconst Carousel = () => (\n  <>\n    <button className=\"left\" onClick={() => {/*...*/}}>\n      <Icon name=\"left\" />\n    </button>\n\n    {/*...*/}\n\n    <button className=\"right\" onClick={() => {/*...*/}}>\n      <Icon name=\"right\" />\n    </button>\n  </>\n);\n\nconst ArrowButton = ({ direction, onClick }) => (\n  <button className={direction} onClick={onClick}>\n    <Icon name={direction} />\n  </button>\n);\n\nconst Carousel = () => (\n  <ArrowButton direction=\"left\" onClick={() => {/*...*/}} />\n  {/*...*/}\n  <ArrowButton direction=\"right\" onClick={() => {/*...*/}} />\n);\n`;\n\nconst slide: CodeSlide = {\n  type: 'code',\n  headerProps: {\n    children: \"DRY (Don't Repeat Yourself — Não se repita)\",\n    fontSize: 'h2'\n  },\n  description: (\n    <Text>\n      Se você estiver fazendo a mesma coisa em vários locais, consolide o código duplicado, modularize, componentize!\n    </Text>\n  ),\n  code,\n  stepperProps: {\n    defaultValue: [1, 13],\n    values: [[15, 25]]\n  }\n}\n\nexport default slide;\n","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/naruto.jpeg'),\n  backgroundOpacity: 0.5\n}\n\nexport default slide;","import React from 'react';\nimport { Heading, UnorderedList, ListItem, CodeSpan } from 'spectacle';\n\nconst Justifications: React.FC = () => (\n  <>\n    <Heading type=\"h2\">\n      5 principais motivos para \"justificar\" a entrega de um código sujo\n    </Heading>\n\n    <UnorderedList>\n      <ListItem>\n        <CodeSpan>Você estava querendo resultados rápido demais</CodeSpan>\n      </ListItem>\n\n      <ListItem>\n        <CodeSpan>\n          Você percebeu que o prazo estava acabando e não daria pra entregar\n        </CodeSpan>\n      </ListItem>\n\n      <ListItem>\n        <CodeSpan>\n          Você estava de saco cheio da tarefa atual e não queria se esforçar pra deixar mais bonita\n        </CodeSpan>\n      </ListItem>\n    </UnorderedList>\n  </>\n);\n\nexport default Justifications;","import React from 'react';\nimport { Heading, UnorderedList, ListItem, CodeSpan, Text } from 'spectacle';\n\nconst Justifications2: React.FC = () => (\n  <>\n    <Heading type=\"h2\">\n      5 principais motivos para \"justificar\" a entrega de um código sujo\n    </Heading>\n\n    <UnorderedList>\n      <ListItem>\n        <CodeSpan>\n          Mudança de escopo\n        </CodeSpan>\n      </ListItem>\n\n      <ListItem>\n        <CodeSpan>\n          O seu chefe ou cliente não entendem nada do seu trabalho e só reclamam\n        </CodeSpan>\n      </ListItem>\n    </UnorderedList>\n\n    <Text>Mas a culpa é NOSSA! - Analogia do médico.</Text>\n  </>\n);\n\nexport default Justifications2;","import React from 'react';\nimport { Heading, UnorderedList, ListItem, Text } from 'spectacle';\n\nconst SignsOfACleanCode: React.FC = () => (\n  <>\n    <Heading type=\"h2\">Sinais de um código limpo</Heading>\n    <UnorderedList>\n      <ListItem>\n        Pode ser entendido facilmente por todos da equipe\n        </ListItem>\n\n      <ListItem>\n        Pode ser lido e aprimorado por um desenvolvedor que não seja o autor original\n        </ListItem>\n      </UnorderedList>\n\n    <Text>\n      Com capacidade de compreensão, vem a legibilidade, a capacidade de mudança, a extensibilidade e a manutenção.\n    </Text>\n  </>\n);\n\nexport default SignsOfACleanCode;","import React from 'react';\nimport { Heading, Text } from 'spectacle';\n\nconst MindsetCleanCode: React.FC = () => (\n  <>\n    <Heading type=\"h2\">\n      A grande mudança de mindset do Clean Code é\n    </Heading>\n    <Text>\n      Ao invés de pensar como produzir mais é como dar uma manutenção melhor?\n    </Text>\n  </>\n);\n\nexport default MindsetCleanCode;\n","import { ImageSlide } from '../utils/renderImageSlide'\n\nconst slide: ImageSlide = {\n  type: 'image',\n  backgroundColor: 'white',\n  backgroundImage: require('../assets/uncle-bob-defender-of-clean-code.jpg')\n}\n\nexport default slide;","import React from 'react'\nimport Home from './Home'\nimport Phrases from './Phrases'\nimport GeneralRules from './GeneralRules'\nimport codeLogic from './codeLogic'\nimport forgetfulness from './forgetfulness'\nimport later from './later'\nimport settings from './settings'\nimport polymorphism from './polymorphism'\nimport namesAreImportant from './namesAreImportant'\nimport negation from './negation'\nimport jequiti from './jequiti'\nimport abbreviation from './abbreviation'\nimport objectAsArguments from './objectAsArguments'\nimport SpecialistFunction from './SpecialistFunction'\nimport Architecture from './Architecture'\nimport smallFunctions from './smallFunctions'\nimport redundant from './redundant'\nimport regex from './regex'\nimport restSpred from './restSpred'\nimport defaultValues from './defaultValues'\nimport arrayDestructuring from './arrayDestructuring'\nimport keepItSimple from './keepItSimple'\nimport modularize from './modularize'\nimport naruto from './naruto'\nimport Justifications from './Justifications'\nimport Justifications2 from './Justifications2'\nimport SignsOfACleanCode from './SignsOfACleanCode'\nimport MindsetCleanCode from './MindsetCleanCode'\nimport uncleBob from './uncleBob'\n\nexport default [\n  <Home />,\n  <Phrases />,\n  codeLogic,\n  forgetfulness,\n  later,\n  <GeneralRules />,\n  settings,\n  polymorphism,\n  namesAreImportant,\n  negation,\n  jequiti,\n  abbreviation,\n  objectAsArguments,\n  <SpecialistFunction />,\n  <Architecture />,\n  smallFunctions,\n  redundant,\n  regex,\n  jequiti,\n  restSpred,\n  defaultValues,\n  arrayDestructuring,\n  keepItSimple,\n  modularize,\n  naruto,\n  <Justifications />,\n  <Justifications2 />,\n  <SignsOfACleanCode />,\n  <MindsetCleanCode />,\n  uncleBob,\n]\n","export default {\n  colors: {\n    primary: '#fff',\n    secondary: '',\n    backgroundColor: '#00b894',\n  }\n};\n","import React from 'react'\nimport { Deck } from 'spectacle'\nimport slides from './slides/Slides'\nimport theme from './theme'\nimport { renderCodeSlide, CodeSlide } from './utils/renderCodeSlide'\nimport { renderImageSlide, ImageSlide } from './utils/renderImageSlide'\nimport { renderCommonSlide } from './utils/renderCommonSlide'\n\nconst App: React.FC = () => (\n  <Deck transitionEffect=\"slide\" theme={theme}>\n    {\n      slides.map((slide: JSX.Element | CodeSlide | ImageSlide) => {\n        const isCodeType = slide.type === 'code'\n        if (isCodeType) {\n          return renderCodeSlide(slide as CodeSlide)\n        }\n\n        const isImageType = slide.type === 'image'\n        if (isImageType) {\n          return renderImageSlide(slide as ImageSlide)\n        }\n\n        return renderCommonSlide(slide as JSX.Element)\n      })\n    }\n  </Deck>\n);\n\nexport default App;\n","import React from \"react\";\nimport { Slide } from \"spectacle\";\n\nexport interface ImageSlide {\n  type: 'image',\n  backgroundColor: string,\n  backgroundImage: string,\n  backgroundOpacity?: number,\n}\n\nexport const renderImageSlide = (props: ImageSlide) => (\n  <Slide\n    backgroundColor={props.backgroundColor}\n    backgroundOpacity={props.backgroundOpacity}\n    backgroundImage={`url(${props.backgroundImage})`}\n    backgroundSize=\"contain\"\n  >\n    <></>\n  </Slide>\n);\n","import React from \"react\";\nimport {\n  TypographyProps,\n  Slide,\n  Heading,\n  Stepper,\n  Box,\n  CodePane,\n  //@ts-ignore\n  indentNormalizer\n} from \"spectacle\";\n//@ts-ignore\nimport darkTheme from 'prism-react-renderer/themes/vsDark';\n\nexport interface CodeSlide {\n  headerProps: TypographyProps,\n  description?: JSX.Element,\n  stepperProps: {\n    values: number[][];\n    defaultValue: number[] | [];\n  },\n  type: 'code',\n  code: string,\n};\n\nexport const renderCodeSlide = ({\n  code,\n  headerProps,\n  description,\n  stepperProps\n}: CodeSlide) => (\n    <Slide backgroundColor=\"backgroundColor\">\n      <Heading {...headerProps} />\n\n      {description !== undefined && description}\n\n      <Stepper {...stepperProps}>\n        {value => (\n          <Box width=\"100%\" height=\"100%\">\n          <CodePane\n              fontSize={30}\n              highlightStart={value[0]}\n              highlightEnd={value[1]}\n              language=\"typescript\"\n              autoFillHeight\n              theme={{\n                ...darkTheme,\n                sizes: {\n                  minWidth: '100%'\n                }\n              }}\n            >\n            {indentNormalizer(code)}\n            </CodePane>\n          </Box>\n        )}\n      </Stepper>\n    </Slide>\n  );","import React from 'react';\nimport { Slide, FlexBox, } from 'spectacle';\n\nexport const renderCommonSlide = (slide: JSX.Element) => (\n  <Slide backgroundColor=\"backgroundColor\">\n    <FlexBox height=\"100%\" width=\"100%\" flexDirection=\"column\">\n      {slide}\n    </FlexBox>\n  </Slide>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}